package 动态规划.分割整数;
// 2 = 1+1 3 = 1+2 4=2+2 5=2+3 6=3+3
//这种题目,一般先自己找规律,写一写简单的,不要直接去找规律,把情况分清楚
public class 整数拆分343 {
    public int integerBreak(int n) {
        int[] dp = new int[n + 1];  //作为从小到大,每个分割后最大的乘积值
        dp[0] = 0;
        dp[1] = 1;//前两个是不满足条件的填充进数组
        // dp[2] = 1;  //注意别写成2,也可以不写,知识作为第一个有效值.
        for (int i = 2; i <= n; i++) { //填充后面的dp数组.
            for (int j = 1; j < i; j++) {  //j是从1开始切分整数,进行乘积比较,主要比较j*dp[i-j],和j*(i-j);看看哪个大,当然还有dp[i],开始默认为0,后面会在j值变大时,dp[i]作为上一j的最大乘积值,逐渐更新.
                dp[i] = Math.max(dp[i], Math.max(j * dp[i - j], j * (i - j)));  //右侧dp[i]为上一j循环的最大乘积值.
            }
        }
        return dp[n];
    }
}
